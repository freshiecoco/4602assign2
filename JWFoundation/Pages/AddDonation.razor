@page "/adddonation"
@attribute [Authorize(Roles = "Admin")]
@inject DonationService donationService
@inject DonorService donorService
@inject PaymentService paymentService
@inject TransactionService transactionService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Add Donation</PageTitle>
<div class="container">
<h1>New Donation</h1>

<EditForm Model="@donation" OnValidSubmit="HandleValidSubmit">
  <DataAnnotationsValidator />

  <div class="form-group py-2">
    <label for="Date">Date:</label>
    <InputDate id="Date" class="form-control" @bind-Value="donation.Date" />
  </div>
  @if(donors != null) {
    <div class="form-group py-2">
    <ValidationMessage For="@(() => donation.AccountNo)" />
    <label for="Donor">Donor:</label>
    <InputSelect id="Donor" class="form-control" @bind-Value="donation.AccountNo">
        @foreach (var item in donors)
        {
            <option value="@item.AccountNo">@item.AccountNo) @item.FirstName @item.LastName</option>
        }
    </InputSelect>
  </div>
  }
    @if(transactionTypes !=null) {
    <div class="form-group py-2">
        <ValidationMessage For="@(() => donation.TransactionTypeId)" />
        <label for="TransactionType">Transaction Type:</label>
        <InputSelect id="TransactionType" class="form-control" @bind-Value="donation.TransactionTypeId">
            @foreach (var item in transactionTypes)
            {
                <option value="@item.TransactionTypeId">@item.TransactionTypeId) @item.Name</option>
            }
        </InputSelect>
    </div>
    }

    @if(paymentMethods !=null) {
    <div class="form-group py-2">
        <label for="PaymentMethod">Payment Method:</label>
        <ValidationMessage For="@(() => donation.PaymentMethodId)" />
        <InputSelect id="PaymentMethod" class="form-control" @bind-Value="donation.PaymentMethodId">
            @foreach (var item in paymentMethods)
            {
                <option value="@item.PaymentMethodId">@item.PaymentMethodId) @item.Name</option>
            }
        </InputSelect>
    </div>
    }

    <div class="form-group py-2">
        <ValidationMessage For="@(() => donation.Amount)" />
        <label for="Amount">Amount:</label>
        <InputNumber id="Amount" class="form-control" @bind-Value="donation.Amount" />
    </div>

    <div class="form-group py-2">
        <ValidationMessage For="@(() => donation.Notes)" />
        <label for="Notes">Notes:</label>
        <InputText id="Notes" class="form-control" @bind-Value="donation.Notes" />
    </div>

    <button type="submit" class="btn btn-dark my-5">Submit</button>
</EditForm>

</div>
@code {
  private Donation donation = new Donation();
  List<Donor>? donors;
  List<PaymentMethod>? paymentMethods;
  List<TransactionType>? transactionTypes;

  protected override async Task OnInitializedAsync() {
     // When the page is loaded, set the current date
    donation.Date = DateTime.Now;
    
    donors = await donorService.GetDonorsAsync();
    paymentMethods = await paymentService.GetPaymentMethodsAsync();
    transactionTypes = await transactionService.GetTransactionTypesAsync();
  }


  private async Task HandleValidSubmit() {
    var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authenticationState.User;
    var username = user.Identity?.Name;

    donation!.CreatedBy = username?.ToString() ?? "Unknown";
    donation!.Created = DateTime.Now;

    
    await donationService.InsertDonationAsync(donation);
    NavManager.NavigateTo("/donations");
  }
}