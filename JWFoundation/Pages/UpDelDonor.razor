@page "/updel/{id}/{mode}"
@attribute [Authorize(Roles = "Admin")]
@inject DonorService donorService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Update/Delete Donor</PageTitle>

<div class="container">
@if (tempDonor!= null && donor != null && Mode == "edit") {

<div class="m-5 bg-light">
    <small>Originally created on: <strong>@donor.Created.ToString("ddd, MMMM d, yyyy - h:mm tt")</strong> 
        by : <strong>@donor.CreatedBy</strong> 
    </small>
</div>
@if (donor.ModifiedBy != null)
{
    <div>
    <small>Modified on: @donor.Modified.ToString("ddd, MMMM d, yyyy - h:mm tt")
        by: <strong>@donor.ModifiedBy</strong> 
    </small>
    </div>
}
<div>
    <h2>Edit @donor.FirstName @donor.LastName's Information</h2>
    <EditForm Model="@tempDonor" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group py-2">
            <ValidationMessage For="@(() => tempDonor.FirstName)" />
            <label for="FirstName">First Name:</label>
            <InputText id="FirstName" class="form-control text-muted" @bind-Value="tempDonor.FirstName" />
        </div>
        <div class="form-group py-2">
            <ValidationMessage For="@(() => tempDonor.LastName)" />
            <label for="LastName">Last Name:</label>
            <InputText id="LastName" class="form-control text-muted" @bind-Value="tempDonor.LastName" />
        </div>
        <div class="form-group py-2">
            <ValidationMessage For="@(() => tempDonor.Email)" />
            <label for="Email">Email:</label>
            <InputText id="Email" class="form-control text-muted" @bind-Value="tempDonor.Email" />
        </div>
        <div class="form-group py-2">
            <ValidationMessage For="@(() => tempDonor.Street)" />
            <label for="Street">Street:</label>
            <InputText id="Street" class="form-control text-muted" @bind-Value="tempDonor.Street" />
        </div>
       
        <div class="form-group py-2">
            <ValidationMessage For="@(() => tempDonor.City)" />
            <label for="City">City:</label>
            <InputText id="City" class="form-control text-muted" @bind-Value="tempDonor.City" />
        </div>

        <div class="form-group py-2">
            <ValidationMessage For="@(() => tempDonor.PostalCode)" />
            <label for="PostalCode">Postal Code:</label>
            <InputText id="PostalCode" class="form-control text-muted" @bind-Value="tempDonor.PostalCode" />
        </div>
        <div class="form-group py-2">
            <ValidationMessage For="@(() => tempDonor.City)" />
            <label for="Country">Country:</label>
            <InputText id="Country" class="form-control text-muted" @bind-Value="tempDonor.Country" />
        </div>
        <div class="py-2">
            <button type="submit" class="btn btn-dark">Update</button>
        </div>
    </EditForm>

    @code {
        private async Task HandleValidSubmit()
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            var username = user.Identity?.Name;

            donor!.FirstName = tempDonor!.FirstName;
            donor!.LastName = tempDonor!.LastName;
            donor!.Email = tempDonor!.Email;
            donor!.Street = tempDonor!.Street;
            donor!.PostalCode = tempDonor!.PostalCode;
            donor!.City = tempDonor!.City;
            donor!.Country = tempDonor!.Country;

            donor!.ModifiedBy = username?.ToString() ?? "Unknown";
            await donorService.UpdateDonorAsync(donor!.AccountNo, donor);
            NavManager.NavigateTo("/donors");
        }
    }
</div>
}
else if (donor != null && Mode == "del")
{ // Delete
    <fieldset>
        <legend>Donor Information</legend>
        <p>First Name: @donor.FirstName</p>
        <p>Last Name: @donor.LastName</p>
    </fieldset>
    <p>Delete Donor with ID == @Id</p>
    <p>Are you sure?</p>
    <button type="button" class="btn btn-danger" @onclick="HandleDeleteDonor">Delete</button>
    @code {
    private async Task HandleDeleteDonor()
    {
        await donorService.DeleteDonorAsync(donor!.AccountNo);
        NavManager.NavigateTo("/donors");
    }
}
}
else
{
    <p>Donor with ID == @Id not found</p>
}

</div>
@code {
    private Donor? donor = new Donor();
    private Donor? tempDonor;

    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Mode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        int intId = Convert.ToInt32(Id);
        donor = await donorService.GetDonorByIdAsync(intId);
        tempDonor = new Donor {
            FirstName = donor!.FirstName,
            LastName = donor!.LastName,
            Email = donor!.Email,
            Street = donor!.Street,
            PostalCode = donor!.PostalCode,
            City = donor!.City,
            Country = donor!.Country,
        };
    }
}
